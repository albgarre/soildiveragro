d_new() %>% names()
d_new() %>%
seelct(sample, `PedoClim (choose from list)`)
d_new() %>%
select(sample, `PedoClim (choose from list)`)
d_new() %>%
select(sample, `PedoClim (choose from list)`) %>%
left_join(pred)
model_data
d_new() %>%
select(sample, region = `PedoClim (choose from list)`) %>%
left_join(pred_new())
d <- d_new() %>%
select(sample, region = `PedoClim (choose from list)`) %>%
left_join(pred_new())
pred <- d_new() %>%
select(sample, region = `PedoClim (choose from list)`) %>%
left_join(pred_new())
pred %>%
split(.$sample)
pred %>%
split(.$sample)
pred %>%
split(.$sample) %>%
map(.,
~ filter(model_data, region == .$region)
)
pred %>%
split(.$sample) %>%
map(.,
~ filter(model_data$bacteria, region == .$region)
)
model_data$bacteria
pred %>%
split(.$sample) %>%
map(.,
~ filter(model_data$bacteria, region == "aa")
)
pred %>%
split(.$sample) %>%
map(.,
~ dplyr::filter(model_data$bacteria, region == "aa")
)
pred %>%
split(.$sample) %>%
map(.,
~ dplyr::filter(model_data$bacteria, region == .$region)
)
pred %>%
split(.$sample) %>%
map(.,
~ dplyr::filter(model_data$bacteria, region == .$region)$chao1
)
pred %>%
split(.$sample) %>%
map(.,
~ mean(.$bacteria > dplyr::filter(model_data$bacteria, region == .$region)$chao1, na.rm = TRUE)
)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > dplyr::filter(model_data$bacteria, region == .$region)$chao1, na.rm = TRUE)
)
)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > dplyr::filter(model_data$bacteria, region == .$region)$chao1, na.rm = TRUE),
fungal = mean(.$fungal > dplyr::filter(model_data$fungal, region == .$region)$chao1, na.rm = TRUE),
nematode = mean(.$nematode > dplyr::filter(model_data$nematode, region == .$region)$chao1, na.rm = TRUE),
bacteria = mean(.$yield > dplyr::filter(model_data$yield, region == .$region)$yield, na.rm = TRUE)
)
)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > dplyr::filter(model_data$bacteria, region == .$region)$chao1, na.rm = TRUE)
# fungal = mean(.$fungal > dplyr::filter(model_data$fungal, region == .$region)$chao1, na.rm = TRUE),
# nematode = mean(.$nematode > dplyr::filter(model_data$nematode, region == .$region)$chao1, na.rm = TRUE),
# bacteria = mean(.$yield > dplyr::filter(model_data$yield, region == .$region)$yield, na.rm = TRUE)
)
)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > dplyr::filter(model_data$bacteria, region == .$region)$chao1, na.rm = TRUE),
fungal = mean(.$fungal > dplyr::filter(model_data$fungal, region == .$region)$chao1, na.rm = TRUE)
# nematode = mean(.$nematode > dplyr::filter(model_data$nematode, region == .$region)$chao1, na.rm = TRUE),
# bacteria = mean(.$yield > dplyr::filter(model_data$yield, region == .$region)$yield, na.rm = TRUE)
)
)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > dplyr::filter(model_data$bacteria, region == .$region)$chao1, na.rm = TRUE),
fungal = mean(.$fungal > dplyr::filter(model_data$fungal, region == .$region)$chao1, na.rm = TRUE),
nematode = mean(.$nematode > dplyr::filter(model_data$nematode, region == .$region)$chao1, na.rm = TRUE)
# bacteria = mean(.$yield > dplyr::filter(model_data$yield, region == .$region)$yield, na.rm = TRUE)
)
)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > dplyr::filter(model_data$bacteria, region == .$region)$chao1, na.rm = TRUE),
fungal = mean(.$fungal > dplyr::filter(model_data$fungal, region == .$region)$chao1, na.rm = TRUE),
nematode = mean(.$nematode > dplyr::filter(model_data$nematode, region == .$region)$chao1, na.rm = TRUE),
yield = mean(.$yield > dplyr::filter(model_data$yield, region == .$region)$yield, na.rm = TRUE)
)
)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
region = .$region,
bacteria = mean(.$bacteria > dplyr::filter(model_data$bacteria, region == .$region)$chao1, na.rm = TRUE),
fungal = mean(.$fungal > dplyr::filter(model_data$fungal, region == .$region)$chao1, na.rm = TRUE),
nematode = mean(.$nematode > dplyr::filter(model_data$nematode, region == .$region)$chao1, na.rm = TRUE),
yield = mean(.$yield > dplyr::filter(model_data$yield, region == .$region)$yield, na.rm = TRUE)
)
)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
region = .$region,
bacteria = mean(.$bacteria > dplyr::filter(model_data$bacteria, region == .$region)$chao1, na.rm = TRUE),
fungal = mean(.$fungal > dplyr::filter(model_data$fungal, region == .$region)$chao1, na.rm = TRUE),
nematode = mean(.$nematode > dplyr::filter(model_data$nematode, region == .$region)$chao1, na.rm = TRUE),
yield = mean(.$yield > dplyr::filter(model_data$yield, region == .$region)$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything())
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample)
library(tidyverse)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample)
pred <- pred_new()
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
value = ifelse(value < 10, "low",
ifelse(value < 80, "medium", "high"))
)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < 10, "low",
ifelse(value < 80, "medium", "high"))
)
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < 10, "low",
ifelse(value < 80, "medium", "high"))
) %>% View()
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>% View()
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")")) %>%
pivot_wider()
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")"))
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")")) %>%
select(-category) %>%
pivot_wider()
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")"))
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")")) %>%
# select(-category) %>%
pivot_wider()
pred %>%
split(.$sample) %>%
map(.,
~ tibble(
bacteria = mean(.$bacteria > model_data$bacteria$chao1, na.rm = TRUE),
fungal = mean(.$fungal > model_data$fungal$chao1, na.rm = TRUE),
nematode = mean(.$nematode > model_data$nematode$chao1, na.rm = TRUE),
yield = mean(.$yield > model_data$yield$yield, na.rm = TRUE)
)
) %>%
imap_dfr(., ~ mutate(.x, sample = .y)) %>%
select(sample, everything()) %>%
pivot_longer(-sample) %>%
mutate(
category = ifelse(value < .1, "low",
ifelse(value < .80, "medium", "high"))
) %>%
mutate(value = paste0(round(value*100, 0), "% (", category, ")")) %>%
select(-category) %>%
pivot_wider()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
data(model_data)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
model_data$nema
pred_new()
p <- model_data$nema %>%
ggplot() +
geom_boxplot(aes(x = 1, y = chao1)) +
geom_hline(aes(yintercept = nematode, colour = sample), data = pred_new(),
linetype = 2) +
coord_flip()
p
golem::run_dev()
golem::run_dev()
golem::add_shinyappsio_file()
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
soildiveragro::run_app() # add parameters here (if any)
model_data <- readRDS(my_data)
model_data <- readRDS("model_data.rds")
usethis::use_data(model_data, overwrite = TRUE)
pred_models <- readRDS("pred_models.rds")
rotations <- readRDS("rotations.rds")
scales <- readRDS("rotations.rds")
scales <- readRDS("scales.rds")
usethis::use_data(model_data, overwrite = TRUE)
usethis::use_data(pred_models, overwrite = TRUE)
usethis::use_data(rotations, overwrite = TRUE)
usethis::use_data(scales, overwrite = TRUE)
golem::run_dev()
library(soildiveragro)
golem::run_dev()
golem::run_dev()
golem::run_dev()
?set_names
golem::run_dev()
mtcars
mtcars %>% set_names(., c("a", "b"))
library(tidyverse)
mtcars %>% set_names(., c("a", "b"))
?safeError
?showModal
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
23-5
golem::run_dev()
?drop_na
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
library(soildiveragro)
createAppManifest()
?createAppManifest
??createAppManifest
rsconnect::writeManifest()
rsconnect::writeManifest()
renv::status()
renv::init()
## Fill the DESCRIPTION ----
## Add meta data about your application and set some default {golem} options
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "soildiveragro", # The name of the golem package containing the app (typically lowercase, no underscore or periods)
pkg_title = "PKG_TITLE", # What the Package Does (One Line, Title Case, No Period)
pkg_description = "PKG_DESC.", # What the package does (one paragraph).
authors = person(
given = "AUTHOR_FIRST", # Your First Name
family = "AUTHOR_LAST", # Your Last Name
email = "AUTHOR@MAIL.COM", # Your email
role = c("aut", "cre") # Your role (here author/creator)
),
repo_url = NULL, # The URL of the GitHub repo (optional),
pkg_version = "0.0.0.9000", # The version of the package containing the app
set_options = TRUE # Set the global golem options
)
## Install the required dev dependencies ----
golem::install_dev_deps()
## Create Common Files ----
## See ?usethis for more information
usethis::use_mit_license("Alberto Garre") # You can set another license here
golem::use_readme_rmd(open = FALSE)
devtools::build_readme()
# go to dev/02_dev.R
rstudioapi::navigateToFile("dev/02_dev.R")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
# You're now set! ----
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
## Posit ----
## If you want to deploy on Posit related platforms
golem::add_positconnect_file()
golem::add_shinyappsio_file()
## Posit ----
## If you want to deploy on Posit related platforms
golem::add_positconnect_file()
## Add/update manifest file (optional; for Git backed deployment on Posit )
rsconnect::writeManifest()
rsconnect::appDependencies()
## In command line.
rsconnect::deployApp(
appName = desc::desc_get_field("Package"),
appTitle = desc::desc_get_field("Package"),
appFiles = c(
# Add any additional files unique to your app here.
"R/",
"inst/",
"data/",
"NAMESPACE",
"DESCRIPTION",
"app.R"
),
appId = rsconnect::deployments(".")$appID,
lint = FALSE,
forceUpdate = TRUE
)
